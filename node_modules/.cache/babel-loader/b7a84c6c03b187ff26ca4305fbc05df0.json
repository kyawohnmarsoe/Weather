{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport weatherAPI from \"../../api\";\nconst sliceName = \"weather\";\nexport const fetchCurrentWeather = createAsyncThunk(`${sliceName}/fetchCurrentWeather`, ({\n  query\n}) => weatherAPI.fetchCurrentWeather({\n  query\n}));\nexport const fetchWeatherForecast = createAsyncThunk(`${sliceName}/fetchWeatherForecast`, ({\n  lat,\n  lon\n}) => weatherAPI.fetchWeatherForecast({\n  lat,\n  lon\n}));\nexport const weatherSlice = createSlice({\n  name: sliceName,\n  initialState: {\n    currentData: null,\n    loading: true,\n    error: null,\n    currentCity: 'Singapore',\n    forecastData: null\n  },\n  reducers: {\n    changeCity: (state, action) => {\n      event.preventDefault();\n      state.loading = false;\n      state.currentCity = action.payload;\n    },\n    CurrentWeatherData: (state, action) => {\n      state.loading = false;\n      state.currentData = action.payload;\n      state.error = null;\n    },\n    CurrentWeatherError: (state, action) => {\n      state.loading = false;\n      state.currentData = null;\n      state.error = action.payload;\n    },\n    ForecastWeatherData: (state, action) => {\n      state.loading = false;\n      state.forecastData = action.payload;\n      state.error = null;\n    },\n    ForecastWeatherError: (state, action) => {\n      state.loading = false;\n      state.forecastData = null;\n      state.error = action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchCurrentWeather.pending]: (state, {\n      payload,\n      meta\n    }) => {\n      state.loading = true;\n    },\n    [fetchCurrentWeather.fulfilled]: (state, {\n      payload,\n      meta\n    }) => {\n      state.loading = false;\n      state.currentData = payload.data;\n    },\n    [fetchCurrentWeather.rejected]: (state, {\n      error,\n      meta\n    }) => {\n      state.loading = false;\n      state.error = error;\n    }\n  }\n});\nexport const {\n  changeCity,\n  CurrentWeatherData,\n  CurrentWeatherError,\n  ForecastWeatherData,\n  ForecastWeatherError\n} = weatherSlice.actions;\nexport default weatherSlice.reducer;","map":{"version":3,"sources":["/Users/kyawohnmarsoe/Downloads/weather-widget/src/features/weather/weatherSlice.js"],"names":["createSlice","createAsyncThunk","weatherAPI","sliceName","fetchCurrentWeather","query","fetchWeatherForecast","lat","lon","weatherSlice","name","initialState","currentData","loading","error","currentCity","forecastData","reducers","changeCity","state","action","event","preventDefault","payload","CurrentWeatherData","CurrentWeatherError","ForecastWeatherData","ForecastWeatherError","extraReducers","pending","meta","fulfilled","data","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport weatherAPI from \"../../api\";\n\nconst sliceName = \"weather\";\n\nexport const fetchCurrentWeather = createAsyncThunk(\n    `${sliceName}/fetchCurrentWeather`,\n    ({ query }) => weatherAPI.fetchCurrentWeather({ query })\n);\n\nexport const fetchWeatherForecast = createAsyncThunk(\n    `${sliceName}/fetchWeatherForecast`,\n    ({ lat, lon }) => weatherAPI.fetchWeatherForecast({ lat, lon })\n);\n\nexport const weatherSlice = createSlice({\n    name: sliceName,\n    initialState: {\n        currentData: null,\n        loading: true,\n        error: null,\n        currentCity:'Singapore',\n        forecastData:null,\n  \n        \n    },\n    reducers: {\n        changeCity: (state,action) => {\n            event.preventDefault();\n            state.loading = false;\n            state.currentCity = action.payload;\n           \n        },\n        CurrentWeatherData: (state,action) => {\n            state.loading = false;\n            state.currentData = action.payload;\n            state.error=null;\n        },\n        CurrentWeatherError: (state,action) => {\n            state.loading = false;\n            state.currentData = null;\n            state.error = action.payload;\n        },\n        ForecastWeatherData: (state,action) => {\n            state.loading = false;\n            state.forecastData = action.payload;\n      \n            state.error=null;\n        },\n        ForecastWeatherError: (state,action) => {\n            state.loading = false;\n            state.forecastData = null;\n          \n            state.error = action.payload;\n        }\n\n    },\n    extraReducers: {\n        [fetchCurrentWeather.pending]: (state, { payload, meta }) => {\n            state.loading = true;\n        },\n        [fetchCurrentWeather.fulfilled]: (state, { payload, meta }) => {\n            state.loading = false;\n            state.currentData = payload.data;\n        },\n        [fetchCurrentWeather.rejected]: (state, { error, meta }) => {\n            state.loading = false;\n            state.error = error;\n        },\n    },\n});\nexport const { changeCity,CurrentWeatherData,CurrentWeatherError,ForecastWeatherData,ForecastWeatherError } = weatherSlice.actions;\n\nexport default weatherSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}